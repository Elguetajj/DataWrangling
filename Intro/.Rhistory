#
string <- "This is a string"
class(integer)
#
string <- "This is a string"
class(string)
length(string)
nchar(string)
#Double
number <- 234
class(number)
typeof(number)
lenght(number)
number_2 <- 1/8
typeof(number_2)
#int
integer <- 2L
class(integer)
integer <- 2L
#
string <- "This is a string"
class(string)
length(string)
nchar(string)
#Double
number <- 234
class(number)
typeof(number)
lenght(number)
number_2 <- 1/8
typeof(number_2)
#int
integer <- 2L
class(integer)
# logical
logical <- FALSE
class(logical)
logical*1
as.logical(1)
c(number,number_2)
num_vector <- c(number,number_2)
num_vector_2 <- c(1,2,3,4,"a")
vec_1 <- 1:100
source('C:/Users/elgue/DataWrangling/Intro/intro.R', echo=TRUE)
vex2<- sample(x= 1:10,size=5,replace=FALSE)
#
string <- "This is a string"
class(string)
length(string)
nchar(string)
#Double
number <- 234
class(number)
typeof(number)
lenght(number)
number_2 <- 1/8
typeof(number_2)
#int
integer <- 2L
class(integer)
# logical
logical <- FALSE
class(logical)
logical*1
as.logical(1)
# Vectores
num_vector <- c(number,number_2)
num_vector_2 <- c(1,2,3,4,"a")
vec_1 <- 1:100
vex2<- sample(x= 1:10,size=5,replace=FALSE)
vector("integer", lenght= 10)
vector("integer". lenght= 10)
vector("integer", length= 10)
class(num_vector)
class(num_vector_2)
c(num_vector, 5,6,7,8)
c(num_vector, num_vector_2,5,6,7,8)
log_vec <- c(F,F,T)
class(log_vec)
log_vec
log_vec*10
as.numeric(num_vector_2)
asc(72)
asc(abc)
utf8ToInt("Elgueta")
factor_1 <- c("Mon","Tues","Thu","Fri","Sar","Sun","Wed","Thu")
factor_2 <- ordered(factor_2, levels = c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"))
factor_2 <- c("Mon","Tues","Thu","Fri","Sar","Sun","Wed","Thu")
factor_2 <- ordered(factor_2, levels = c("Mon","Tue","Wed","Thu","Fri","Sat","Sun"))
factor_2
factor_2 <- c("Mon","Tues","Thu","Fri","Sat","Sun","Wed","Thu")
factor_2 <- ordered(factor_2, levels = c("Mon","Tues","Wed","Thu","Fri","Sat","Sun"))
factor_2
vector1 <- c(1,2,3,4,5)
vector2 <- c(F,F,T)
vector3 <- letters[1:6]
list_1 <- list(vector1,vector2,vector3)
names(list_1) <- c("A","B","C")
list_1$A
matrix(1:10, nrow = 2, ncol=5 )
mat <- matrix(1:10, nrow = 2, ncol=5 )
mat[1.]
C(1:6)
c(1:6)
c(1:6)[c(1,3:5)]
a <- c(1,2,3,4,5,4,6,4,3,4,5,7)
condicion <- a>4
a[#condicion]
a[condicion]
condicion
a[a>=4]
clear
df <- data.frame(
col1 = c("this","is","a","vector","of","strings"),
col2 = 1:6,
col3 letters[1:6],
stringsAsFactors = FALSE
)
df <- data.frame(
col1 = c("this","is","a","vector","of","strings"),
col2 = 1:6,
col3 = letters[1:6],
stringsAsFactors = FALSE)
View(df)
View(df)
str(df)
df$col2
df$col1
df$col1[1:2]
names(df)
names(df) <- c("1","2","3")
df$1
df$"1"
head(df, head)
head(df)
tail(df)
head(df,3)
tail(df,2)
nrow(df)
ncol(df)
num_vector_3 <- as.numeric(num_vector_2)
is.na(num_vector_3)
num_vector_3[!is.na(num_vector_3)]
mean(num_vector_3, na.rm = TRUE)
mean(num_vector_3[is.na(num_vector_3)])
mean(num_vector_3[!is.na(num_vector_3)])
df_copy <-  data.frame(
col1 = c("this","is","a",NA,"of","strings"),
col2 = c(1:5,NA),
col3 = letters[1:6]
)
df_copy[!is.na(df_copy$col2)]
df_copy[!is.na(df_copy$col2)]
df_copy[!is.na(df_copy$col2).]
df_copy[!is.na(df_copy$col2),]
df_copy[!is.na(df_copy$col2),]
gwtwd()
getwd()
setwd("C:/Users/elgue/DataWrangling/Intro")
getwd()
head(mtcars)
mtcars
mtcars
library(dplyr)
mtcars %>%
groub_by(carb) %>%
summarise(avg_mg = mean(mpg))
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg))
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(groups(carb),avg_mg = mean(mpg))
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(groups(carb),avg_mg = mean(mpg))
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg))
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg)).groups
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg))
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg), groups = 'drop')
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg), groups = 'drop')
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg), .groups = 'drop')
library(dplyr)
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg))
library(dplyr)
df <-
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg))
df
df <-
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg), .groups = 'drop')
summarise(group_by(mtcars,carb),avg_mg = mean(mpg), .groups = 'drop')
plot(cars)
library(ggplot2)
install.packages("tidyverse")
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
install.packages("reticulate")
library(reticulate)
virtualenv_list()
use_virtualenv("introenv")
n
use_python("introenv/Scripts/python")
use_virtualenv("introenv")
install.packages("RMySQL")
library(RMySQL)
dbcon <- dbConnect(MySQL(),
host = 'mysqlexamples-instance-1.coclu0fxxexm.us-east-1.rds.amazonaws.com',
user = 'ufm_student',
password = 'yQ2znv',
dbname = 'datasets')
library(RMySQL)
dbcon <- dbConnect(MySQL(),
host = 'mysqlexamples-instance-1.coclu0fxxexm.us-east-1.rds.amazonaws.com',
user = 'ufm_student',
password = 'yQ2znv',
dbname = 'datasets')
library(RMySQL)
dbcon <- dbConnect(MySQL(),
host = 'mysqlexamples-instance-1.coclu0fxxexm.us-east-1.rds.amazonaws.com',
user = 'ufm_student',
password = 'yQ2znv',
dbname = 'datasets')
library(RMySQL)
library(RMySQL)
dbcon <- dbConnect(MySQL(),
host = 'mysqlexamples-instance-1.coclu0fxxexm.us-east-1.rds.amazonaws.com',
user = 'ufm_student',
password = 'yQ2znv',
dbname = 'datasets')
install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
dbcon <- dbConnect(MySQL(),
host = 'mysqlexamples-instance-1.coclu0fxxexm.us-east-1.rds.amazonaws.com',
user = 'ufm_student',
password = 'yQ2znv',
dbname = 'datasets')
library(RMySQL)
dbcon <- dbConnect(MySQL(),
host = 'mysqlexamples-instance-1.coclu0fxxexm.us-east-1.rds.amazonaws.com',
user = 'ufm_student',
password = 'yQ2znv',
dbname = 'datasets')
install.packages("odbc")
library(RMySQL)
dbcon <- dbConnect(MySQL(),
host = 'mysqlexamples-instance-1.coclu0fxxexm.us-east-1.rds.amazonaws.com',
user = 'ufm_student',
password = 'yQ2znv',
dbname = 'datasets')
virtualenv_list()
library(reticulate)
virtualenv_list()
setwd("C:/")
use_python("~\Python38\python.exe")
use_python("~\Python38\python")
use_python("~/Python38/python")
virtualenv_list()
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
setwd("C:/Users/elgue/DataWrangling/Intro")
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
mtcars
library(dplyr)
df <-
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg), .groups = 'drop')
summarise(group_by(mtcars,carb),avg_mg = mean(mpg), .groups = 'drop')
df
plot(cars)
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
library(reticulate)
py_config()
virtualenv_create("introenv")
virtualenv_list()
virtualenv_root()
library(dplyr)
df <-
mtcars %>%
group_by(carb) %>%
summarise(avg_mg = mean(mpg), .groups = 'drop')
virtualenv_list()
py_install(pandas)
virtualenv_python(introenv)
virtualenv_list
virtualenv_list()
virtualenv_python("introenv")
virtualenv_install(pandas)
virtualenv_install("pandas")
virtualenv_install("introenv","pandas")
```{r}
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
library(ggplot2)
diamonds %>%
ggplot(aes(carat,price,color=color))+
geom_point()
setwd("C:/Users/elgue/DataWrangling/Intro")
#
string <- "This is a string"
class(string)
length(string)
nchar(string)
#Double
number <- 234
class(number)
typeof(number)
lenght(number)
number_2 <- 1/8
typeof(number_2)
#int
integer <- 2L
class(integer)
# logical
logical <- FALSE
class(logical)
logical*1
as.logical(1)
# Vectores
num_vector <- c(number,number_2)
num_vector_2 <- c(1,2,3,4,"a")
vec_1 <- 1:100
vex2<- sample(x= 1:10,size=5,replace=FALSE)
vector("integer", length= 10)
class(num_vector)
class(num_vector_2)
c(num_vector, num_vector_2,5,6,7,8)
log_vec <- c(F,F,T)
class(log_vec)
log_vec*10
as.numeric(num_vector_2)
asc(abc)
utf8ToInt("Elgueta")
# factor
factor_1 <- c("Mon","Tues","Thu","Fri","Sar","Sun","Wed","Thu")
factor_1 <- factor(factor_1)
factor_2 <- c("Mon","Tues","Thu","Fri","Sat","Sun","Wed","Thu")
factor_2 <- ordered(factor_2, levels = c("Mon","Tues","Wed","Thu","Fri","Sat","Sun"))
# Lists
vector1 <- c(1,2,3,4,5)
vector2 <- c(F,F,T)
vector3 <- letters[1:6]
list_1 <- list(vector1,vector2,vector3)
names(list_1) <- c("A","B","C")
list_1$A
# Matrix
mat <- matrix(1:10, nrow = 2, ncol=5 )
mat[1.]
c(1:6)[c(1,3:5)]
a <- c(1,2,3,4,5,4,6,4,3,4,5,7)
a[a>=4]
df <- data.frame(
col1 = c("this","is","a","vector","of","strings"),
col2 = 1:6,
col3 = letters[1:6],
stringsAsFactors = FALSE)
View(df)
str(df)
df$col2
df$col1[1:2]
names(df)
names(df) <- c("1","2","3")
df$"1"
head(df,3)
tail(df,2)
nrow(df)
ncol(df)
# Functions of base R (ufunc)
num_vector_3 <- as.numeric(num_vector_2)
is.na(num_vector_3)
num_vector_3[!is.na(num_vector_3)]
mean(num_vector_3, na.rm = TRUE)
mean(num_vector_3[!is.na(num_vector_3)])
df_copy <-  data.frame(
col1 = c("this","is","a",NA,"of","strings"),
col2 = c(1:5,NA),
col3 = letters[1:6]
)
df_copy[!is.na(df_copy$col2),]
generate_df <- function(x){
df <- data.frame(sample(
a = letters, size = 10, replace = TRUE),
b = sample(1:10, size = 10, replace = TRUE),
c = sample(1:10, size = 10, replace = TRUE)
)
return(df)
}
df_1 <- generate_df(1000)
generate_df <- function(x){
df <- data.frame(
a = sample(letters, size = 10, replace = TRUE),
b = sample(1:10, size = 10, replace = TRUE),
c = sample(1:10, size = 10, replace = TRUE)
)
return(df)
}
df_1 <- generate_df(1000)
apply(df_1[,2:3], MARGIN = 1, FUN = mean)
l <- lapply(1:10, generate_df)
